const http = require("http");
const axios = require("axios");
const url = require("url");
require("dotenv").config()

const host = 'localhost';
const port = 8000;
let count = 0;

const headers = {headers: {"Authorization": `Basic ${process.env.auth}`}};

function cleanUp (params) {
    count++;
    console.log(`Fulfilled request #${count} of type ${params.pathname}.`);
};

const requestListener = async function (req, res) 
{
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Origin, Content-Type, X-TBA-Auth-Key, accept, Access-Control-Allow-Origin');
    res.writeHead(200, { 'Content-Type': 'application/json' });
    
    let headers = {headers: {"Authorization": `Basic ${process.env.auth}`}};
    let params = url.parse(req.url, true);
    
    switch (params.pathname) {
        case "/events":
            season = params.query.eventCode.substring(0, 4);
            eventCode = params.query.eventCode.substring(4, params.query.eventCode.substring.end);
            
            let r = await axios.get(
            `https://frc-api.firstinspires.org/v3.0/${season}/matches/${eventCode.toUpperCase()}`, headers)
            .catch(function (error) {console.log(error.message)});

            //r is an object of json objects; convert it to a string
            let out = "[";
            for (let i = 0; i < r.data['Matches'].length; i++) {
                out += JSON.stringify(r.data['Matches'][i]);
                out += ",";
            }
            //Remove an unneccesary last comma
            out = out.slice(0, -1);
            out += "]";

            cleanUp(params);
            res.end(out);
            break;
    
	        default:
            res.status(400);
            res.end("Invalid request URL.");
            break;
    }
};

const server = http.createServer(requestListener);
server.listen(port, host, () => {
    console.log(`Server is running on http://${host}:${port}`);
});

